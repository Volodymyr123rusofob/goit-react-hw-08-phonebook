{"version":3,"file":"static/js/265.14935a08.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/phonebook/form/contactForm.module.css?17e5","components/phonebook/form/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/phonebook/filter/filter.module.css?d32a","webpack://goit-react-hw-08-phonebook/./src/components/phonebook/listContacts/listContacts.module.css?061d","components/phonebook/listContacts/ListContacts.jsx","redux/contactsList/selectors.js","redux/contactsFilters/selectors.js","components/phonebook/filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/phonebook/appContact.module.css?bc45","components/phonebook/AppContact.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"contactForm_form__j6h86\",\"inp\":\"contactForm_inp__jHNx9\",\"btn\":\"contactForm_btn__7IcHI\",\"box\":\"contactForm_box__wCSkh\",\"boxdiv\":\"contactForm_boxdiv__xSd2R\"};","import { nanoid } from 'nanoid';\nimport style from './contactForm.module.css';\nimport { addContact } from '../../../redux/contactsList/contacts-operations';\nimport { useDispatch } from 'react-redux';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  const onAddContact = data => {\n    dispatch(addContact(data));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const { name, number } = e.target.elements;\n    const newContact = { name: name.value, number: number.value };\n    onAddContact(newContact);\n    e.target.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={style.form} action=\"\">\n      <label htmlFor={nameId}>Name</label>\n      <input\n        id={nameId}\n        className={style.inp}\n        type=\"text\"\n        name=\"name\"\n        required\n      />\n      <label htmlFor={numberId}>Number</label>\n      <input\n        id={numberId}\n        className={style.inp}\n        type=\"tel\"\n        name=\"number\"\n        required\n      />\n      <button className={style.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"inp\":\"filter_inp__2CokL\"};","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"listContacts_list__b8bOw\",\"btn\":\"listContacts_btn__OXMLP\"};","import style from './listContacts.module.css';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../../redux/contactsList/contacts-operations';\n\nconst ListContacts = ({ items }) => {\n  const dispatch = useDispatch();\n\n  const elements = items.map(({ id, name, number }) => (\n    <li key={id} className={style.list}>\n      {name}: {number}\n      <button\n        className={style.btn}\n        onClick={() => dispatch(deleteContact(id))}\n        type=\"button\"\n      >\n        Delete\n      </button>\n    </li>\n  ));\n  return <ul className={style.ullist}>{elements}</ul>;\n};\n\nexport default ListContacts;\n","export const selectListContacts = state => state.contacts;\n","export const selectFilterContact = state => state.filters;\n","import style from './filter.module.css';\nimport ListContacts from '../listContacts/ListContacts';\nimport { useSelector } from 'react-redux';\nimport { selectListContacts } from '../../../redux/contactsList/selectors';\nimport { useDispatch } from 'react-redux';\nimport { selectFilterContact } from '../../../redux/contactsFilters/selectors';\nimport { filterContact } from '../../../redux/contactsFilters/filterSlice';\nimport { fetchContacts } from '../../../redux/contactsList/contacts-operations';\nimport { useEffect } from 'react';\n\nconst FilterContact = () => {\n  const { items, isLoading, error } = useSelector(selectListContacts);\n  const filter = useSelector(selectFilterContact);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getFilteredContact = () => {\n    if (!filter) return items;\n    const normalizedFilter = filter.toLowerCase();\n    const filteredContact = items.filter(({ name }) => {\n      const normalizedName = name.toLowerCase();\n      return normalizedName.includes(normalizedFilter);\n    });\n    return filteredContact;\n  };\n\n  const changeFilter = ({ target }) => {\n    dispatch(filterContact(target.value));\n  };\n\n  const item = getFilteredContact();\n  return (\n    <>\n      <input\n        className={style.inp}\n        onChange={changeFilter}\n        name=\"filter\"\n        placeholder=\"Search\"\n      />\n      {error && <p>{error}</p>}\n      {isLoading && <p>...Loading</p>}\n      {Boolean(items.length) && <ListContacts items={item} />}\n    </>\n  );\n};\n\nexport default FilterContact;\n","// extracted by mini-css-extract-plugin\nexport default {\"box\":\"appContact_box__43-T+\",\"boxdiv\":\"appContact_boxdiv__v3G+P\",\"div\":\"appContact_div__XCtra\"};","import ContactForm from './form/ContactForm';\nimport FilterContact from './filter/Filter';\n\nimport style from './appContact.module.css';\n\nexport const AppContact = () => {\n  return (\n    <div className={style.box}>\n      <div className={style.boxdiv}>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <div className={style.div}>\n          <h2 className={style.h2}>Contacts</h2>\n          <FilterContact />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { AppContact } from '../components/phonebook/AppContact';\n\nconst ContactsPage = () => {\n  return (\n    <main>\n      <AppContact />\n    </main>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["nanoid","size","arguments","length","undefined","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","dispatch","useDispatch","nameId","numberId","_jsxs","onSubmit","e","preventDefault","data","_e$target$elements","target","elements","name","number","newContact","value","addContact","reset","className","style","action","children","_jsx","htmlFor","type","required","_ref","items","map","_ref2","onClick","deleteContact","selectListContacts","state","contacts","selectFilterContact","filters","_useSelector","useSelector","isLoading","error","filter","useEffect","fetchContacts","item","normalizedFilter","toLowerCase","includes","getFilteredContact","_Fragment","onChange","filterContact","placeholder","Boolean","ListContacts","AppContact","ContactForm","FilterContact"],"sourceRoot":""}